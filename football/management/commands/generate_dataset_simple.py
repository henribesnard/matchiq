import openai
import os
import json
from django.core.management.base import BaseCommand
from django.utils.timezone import now
from football.models import QuestionTheme, Question

# Charger la cl√© OpenAI depuis les variables d'environnement
openai.api_key = os.getenv("OPENAI_API_KEY")

# Structure des th√®mes
THEMES = [
    {"name": "Informations sur les matchs", "description": "Questions sur les matchs, horaires, stades et r√©sultats."},
    {"name": "Informations sur les joueurs", "description": "Questions sur les joueurs, leurs statistiques et performances."},
    {"name": "Classements des √©quipes", "description": "Questions sur les classements et performances d'√©quipes."},
    {"name": "Historique des confrontations", "description": "Questions sur les rencontres pass√©es entre deux √©quipes."},
    {"name": "Statistiques avanc√©es", "description": "Questions d√©taill√©es sur les performances des √©quipes et joueurs."}
]

class Command(BaseCommand):
    help = "G√©n√®re un dataset de questions simples et les enregistre en base."

    def handle(self, *args, **kwargs):
        self.stdout.write("üîç Initialisation de la g√©n√©ration de questions...")
        
        # V√©rifier et ins√©rer les th√®mes
        for theme_data in THEMES:
            theme, created = QuestionTheme.objects.get_or_create(
                name=theme_data["name"],
                defaults={"description": theme_data["description"], "created_at": now()}
            )
            if created:
                self.stdout.write(f"‚úÖ Th√®me ajout√© : {theme.name}")

        # G√©n√©rer les questions pour chaque th√®me
        for theme in QuestionTheme.objects.all():
            self.stdout.write(f"üìù G√©n√©ration de questions pour le th√®me : {theme.name}")

            prompt = f"""
            G√©n√®re 10 questions simples en fran√ßais pour le th√®me "{theme.name}" en utilisant diff√©rents styles d'√©criture.
            - Varie les formulations mais garde la m√™me intention.
            - Ne cr√©e pas de questions n√©cessitant des calculs avanc√©s.
            - Chaque question doit √™tre compr√©hensible pour un humain cherchant une information sp√©cifique.

            Exemples :
            - "Quels sont les matchs de Ligue 1 aujourd'hui ?"
            - "Donne-moi la liste des rencontres de Ligue 1 pr√©vues aujourd‚Äôhui."

            R√©ponse attendue sous forme JSON :
            {{
                "questions": [
                    "Quels sont les matchs de Ligue 1 aujourd'hui ?",
                    "Donne-moi la liste des rencontres de Ligue 1 pr√©vues aujourd‚Äôhui."
                ]
            }}
            """

            response = openai.ChatCompletion.create(
                model="gpt-4-turbo",
                messages=[{"role": "system", "content": "Tu es un assistant expert en bases de donn√©es et SQL."},
                          {"role": "user", "content": prompt}]
            )

            try:
                questions_json = json.loads(response["choices"][0]["message"]["content"])
                generated_questions = questions_json["questions"]
            except (KeyError, json.JSONDecodeError):
                self.stderr.write(f"‚ùå Erreur lors de la g√©n√©ration des questions pour {theme.name}")
                continue

            # Stocker les questions g√©n√©r√©es
            for question_text in generated_questions:
                question, created = Question.objects.get_or_create(
                    theme=theme,
                    text=question_text,
                    defaults={
                        "variations": [question_text],  # Initialement une seule variation
                        "complexity": "simple",
                        "created_at": now()
                    }
                )
                if created:
                    self.stdout.write(f"   ‚úÖ Question ajout√©e : {question.text}")

        self.stdout.write("üéâ G√©n√©ration de dataset termin√©e avec succ√®s !")
